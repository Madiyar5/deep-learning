"""
MLP —Å –Ω—É–ª—è - —É—á–∏–º—Å—è –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å
–®–∞–≥ –∑–∞ —à–∞–≥–æ–º –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É
"""

import numpy as np
import matplotlib.pyplot as plt

print("=" * 60)
print("–ß–ê–°–¢–¨ 1: –û–î–ò–ù –ù–ï–ô–†–û–ù")
print("=" * 60)

# –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3x3 (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ —ç—Ç–æ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞)
image = np.array([
    [1, 0, 1],
    [0, 1, 0],
    [1, 0, 1]
])

print("–ù–∞—à–µ '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' 3x3:")
print(image)

# –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø–ª–æ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç MLP!)
flat_image = image.flatten()
print(f"\n–ü–æ—Å–ª–µ flatten: {flat_image}")
print(f"–†–∞–∑–º–µ—Ä: {flat_image.shape}")

# –°–æ–∑–¥–∞–µ–º –û–î–ò–ù –Ω–µ–π—Ä–æ–Ω
weights = np.random.randn(9)  # 9 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–µ—Å–æ–≤
bias = np.random.randn(1)

print(f"\n–í–µ—Å–∞ –Ω–µ–π—Ä–æ–Ω–∞: {weights}")
print(f"–°–º–µ—â–µ–Ω–∏–µ: {bias}")

# –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–∞
output = np.dot(flat_image, weights) + bias
print(f"\n–î–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {output}")

# –ü—Ä–∏–º–µ–Ω—è–µ–º ReLU
output_relu = np.maximum(0, output)
print(f"–ü–æ—Å–ª–µ ReLU: {output_relu}")

print("\n" + "=" * 60)
print("–ß–ê–°–¢–¨ 2: –°–õ–û–ô –ù–ï–ô–†–û–ù–û–í")
print("=" * 60)

# –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –°–õ–û–ô –∏–∑ 3 –Ω–µ–π—Ä–æ–Ω–æ–≤
num_neurons = 3
weights_layer = np.random.randn(9, num_neurons)  # 9 –≤—Ö–æ–¥–æ–≤ ‚Üí 3 –Ω–µ–π—Ä–æ–Ω–∞
bias_layer = np.random.randn(num_neurons)

print(f"\n–ú–∞—Ç—Ä–∏—Ü–∞ –≤–µ—Å–æ–≤: {weights_layer.shape}")
print(f"–£ –∫–∞–∂–¥–æ–≥–æ –∏–∑ {num_neurons} –Ω–µ–π—Ä–æ–Ω–æ–≤ –ø–æ 9 –≤–µ—Å–æ–≤")

# –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–ª–æ–π
layer_output = np.dot(flat_image, weights_layer) + bias_layer
layer_output = np.maximum(0, layer_output)  # ReLU

print(f"\n–í—ã—Ö–æ–¥ —Å–ª–æ—è: {layer_output}")
print(f"–†–∞–∑–º–µ—Ä: {layer_output.shape}")

print("\n" + "=" * 60)
print("–ß–ê–°–¢–¨ 3: –ü–û–õ–ù–ê–Ø MLP –°–ï–¢–¨ (2 —Å–ª–æ—è)")
print("=" * 60)

# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
input_size = 9
hidden_size = 5  # –ø–µ—Ä–≤—ã–π —Å–ª–æ–π: 5 –Ω–µ–π—Ä–æ–Ω–æ–≤
output_size = 2  # –≤—Ç–æ—Ä–æ–π —Å–ª–æ–π: 2 –Ω–µ–π—Ä–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ—Ç" –∏–ª–∏ "—Å–æ–±–∞–∫–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å–∞
W1 = np.random.randn(input_size, hidden_size) * 0.01
b1 = np.zeros(hidden_size)

W2 = np.random.randn(hidden_size, output_size) * 0.01
b2 = np.zeros(output_size)

print(f"–°–ª–æ–π 1: {input_size} ‚Üí {hidden_size}")
print(f"–°–ª–æ–π 2: {hidden_size} ‚Üí {output_size}")

# Forward pass (–ø—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥)
print("\n--- FORWARD PASS ---")

# –°–ª–æ–π 1
z1 = np.dot(flat_image, W1) + b1
a1 = np.maximum(0, z1)  # ReLU
print(f"–ü–æ—Å–ª–µ —Å–ª–æ—è 1: {a1}")

# –°–ª–æ–π 2
z2 = np.dot(a1, W2) + b2
print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥: {z2}")

# Softmax (–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
exp_scores = np.exp(z2)
probs = exp_scores / np.sum(exp_scores)
print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {probs}")
print(f"–ö–ª–∞—Å—Å 0: {probs[0] * 100:.1f}%, –ö–ª–∞—Å—Å 1: {probs[1] * 100:.1f}%")

print("\n" + "=" * 60)
print("–ß–ê–°–¢–¨ 4: –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–´ MLP")
print("=" * 60)

# –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
np.random.seed(42)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: 2 –∫–ª–∞—Å—Å–∞ —Ç–æ—á–µ–∫ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
# –ö–ª–∞—Å—Å 0: —Ç–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ (2, 2)
class_0 = np.random.randn(50, 2) + np.array([2, 2])
# –ö–ª–∞—Å—Å 1: —Ç–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ (5, 5)
class_1 = np.random.randn(50, 2) + np.array([5, 5])

X = np.vstack([class_0, class_1])
y = np.array([0] * 50 + [1] * 50)

print(f"–î–∞–Ω–Ω—ã–µ: {X.shape}")
print(f"–ú–µ—Ç–∫–∏: {y.shape}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(8, 6))
plt.scatter(class_0[:, 0], class_0[:, 1], c='blue', label='–ö–ª–∞—Å—Å 0', alpha=0.6)
plt.scatter(class_1[:, 0], class_1[:, 1], c='red', label='–ö–ª–∞—Å—Å 1', alpha=0.6)
plt.xlabel('–ü—Ä–∏–∑–Ω–∞–∫ 1')
plt.ylabel('–ü—Ä–∏–∑–Ω–∞–∫ 2')
plt.title('–ù–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')
plt.legend()
plt.grid(True)
plt.savefig('data_visualization.png', dpi=150, bbox_inches='tight')
print("\n‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: data_visualization.png")
plt.close()

print("\n" + "=" * 60)
print("–ß–ê–°–¢–¨ 5: –û–ë–£–ß–ï–ù–ò–ï –ü–†–û–°–¢–û–ô MLP")
print("=" * 60)

# –ü—Ä–æ—Å—Ç–∞—è MLP –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
input_dim = 2
hidden_dim = 4
output_dim = 2
learning_rate = 0.01
num_iterations = 1000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
W1 = np.random.randn(input_dim, hidden_dim) * 0.1
b1 = np.zeros(hidden_dim)
W2 = np.random.randn(hidden_dim, output_dim) * 0.1
b2 = np.zeros(output_dim)

print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {input_dim} ‚Üí {hidden_dim} ‚Üí {output_dim}")
print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {W1.size + b1.size + W2.size + b2.size}")

# –û–±—É—á–µ–Ω–∏–µ
losses = []

for iteration in range(num_iterations):
    # Forward pass
    z1 = X.dot(W1) + b1
    a1 = np.maximum(0, z1)  # ReLU
    z2 = a1.dot(W2) + b2

    # Softmax
    exp_scores = np.exp(z2)
    probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)

    # Loss (cross-entropy)
    correct_logprobs = -np.log(probs[range(len(y)), y])
    loss = np.sum(correct_logprobs) / len(y)
    losses.append(loss)

    if iteration % 100 == 0:
        # –¢–æ—á–Ω–æ—Å—Ç—å
        predicted = np.argmax(probs, axis=1)
        accuracy = np.mean(predicted == y) * 100
        print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}: Loss = {loss:.4f}, Accuracy = {accuracy:.1f}%")

    # Backward pass (–≥—Ä–∞–¥–∏–µ–Ω—Ç—ã)
    dscores = probs
    dscores[range(len(y)), y] -= 1
    dscores /= len(y)

    dW2 = a1.T.dot(dscores)
    db2 = np.sum(dscores, axis=0)

    dhidden = dscores.dot(W2.T)
    dhidden[a1 <= 0] = 0  # ReLU gradient

    dW1 = X.T.dot(dhidden)
    db1 = np.sum(dhidden, axis=0)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤
    W1 -= learning_rate * dW1
    b1 -= learning_rate * db1
    W2 -= learning_rate * dW2
    b2 -= learning_rate * db2

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
z1 = X.dot(W1) + b1
a1 = np.maximum(0, z1)
z2 = a1.dot(W2) + b2
exp_scores = np.exp(z2)
probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)
predicted = np.argmax(probs, axis=1)
final_accuracy = np.mean(predicted == y) * 100

print(f"\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {final_accuracy:.1f}%")

# –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è
plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(losses)
plt.xlabel('–ò—Ç–µ—Ä–∞—Ü–∏—è')
plt.ylabel('Loss')
plt.title('–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è')
plt.grid(True)

plt.subplot(1, 2, 2)
plt.scatter(class_0[:, 0], class_0[:, 1], c='blue', label='–ö–ª–∞—Å—Å 0', alpha=0.6)
plt.scatter(class_1[:, 0], class_1[:, 1], c='red', label='–ö–ª–∞—Å—Å 1', alpha=0.6)

# –†–µ—à–∞—é—â–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
h = 0.1
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = np.c_[xx.ravel(), yy.ravel()]

z1 = Z.dot(W1) + b1
a1 = np.maximum(0, z1)
z2 = a1.dot(W2) + b2
Z = np.argmax(z2, axis=1)
Z = Z.reshape(xx.shape)

plt.contourf(xx, yy, Z, alpha=0.3, cmap='RdBu')
plt.xlabel('–ü—Ä–∏–∑–Ω–∞–∫ 1')
plt.ylabel('–ü—Ä–∏–∑–Ω–∞–∫ 2')
plt.title('–†–µ—à–∞—é—â–∞—è –≥—Ä–∞–Ω–∏—Ü–∞')
plt.legend()

plt.tight_layout()
plt.savefig('mlp_training.png', dpi=150, bbox_inches='tight')
print("\n‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: mlp_training.png")

print("\n" + "=" * 60)
print("–ò–¢–û–ì: –ß–¢–û –ú–´ –£–ó–ù–ê–õ–ò")
print("=" * 60)
print("""
1. –ù–µ–π—Ä–æ–Ω = –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤—Ö–æ–¥–æ–≤ + bias + –∞–∫—Ç–∏–≤–∞—Ü–∏—è
2. –°–ª–æ–π = –º–Ω–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
3. MLP = –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º
4. Forward pass = –¥–∞–Ω–Ω—ã–µ ‚Üí —Å–ª–æ–π1 ‚Üí —Å–ª–æ–π2 ‚Üí –≤—ã—Ö–æ–¥
5. –û–±—É—á–µ–Ω–∏–µ = –ø–æ–¥–±–æ—Ä –≤–µ—Å–æ–≤, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É

MLP –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
‚ùå Flatten —Ä–∞–∑—Ä—É—à–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
‚ùå –ú–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –∫–æ –≤—Å–µ–º –Ω–µ–π—Ä–æ–Ω–∞–º)
‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å (—Å–æ—Å–µ–¥–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏ —Å–≤—è–∑–∞–Ω—ã)

–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ CNN, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã! üöÄ
""")